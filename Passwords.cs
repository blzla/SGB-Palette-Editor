using System;

namespace SGB_Settings_Editor
{
    // Convert SGB passwords to color palette
    public static class Passwords
    {
        // LUTs generated by script

        private static readonly ushort[] baseColors = new ushort[] {
            25375, 32607, 31550, 29567, 25503, 25599, 25596, 25496, 32760, 32536, 32666, 32633, 30591, 31679, 28575, 29663, 26591, 27645, 32701, 29689, 32763, 32636, 32637, 26462, 28540, 25468, 25501, 25500, 26554, 28568, 27545, 30586, 31578, 30555, 28476, 28572, 27516, 29630, 27548, 27516, 30654, 26557, 26523, 28571, 26522, 29563, 28540, 31710, 29596, 27482, 32767, 25368, 25368, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 17983, 32447, 30333, 26367, 18239, 18431, 18425, 18225, 32753, 32305, 32565, 32499, 28415, 30591, 24383, 26559, 20415, 22523, 32635, 26611, 32759, 32505, 32507, 20157, 24313, 18169, 18235, 18233, 20341, 24369, 22323, 28405, 30389, 28343, 24185, 24377, 22265, 26493, 22329, 22265, 28541, 20347, 20279, 24375, 20277, 26359, 24313, 30653, 26425, 22197, 32767, 17969, 17969, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 10591, 32287, 29116, 23167, 10975, 11263, 11254, 10954, 32746, 32074, 32464, 32365, 26239, 29503, 20191, 23455, 14239, 17401, 32569, 23533, 32755, 32374, 32377, 13852, 20086, 10870, 10969, 10966, 14128, 20170, 17101, 26224, 29200, 26131, 19894, 20182, 17014, 23356, 17110, 17014, 26428, 14137, 14035, 20179, 14032, 23155, 20086, 29596, 23254, 16912, 32767, 10570, 10570, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 31, 29983, 24792, 17855, 543, 1023, 1008, 608, 32736, 31744, 32363, 32134, 24063, 27295, 12863, 17183, 4991, 12277, 32468, 20454, 32687, 32176, 31157, 4376, 15826, 400, 2679, 1648, 5802, 14912, 11847, 20906, 24875, 20846, 13554, 13874, 10674, 19161, 9779, 8624, 21208, 5781, 7695, 13839, 7722, 16815, 14800, 26425, 17969, 11627, 32767, 0, 0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 21, 21717, 18546, 12597, 405, 693, 684, 384, 22176, 21504, 21894, 21795, 15669, 18933, 9621, 12885, 3669, 6831, 21999, 12963, 22185, 21804, 21807, 3282, 9516, 300, 399, 396, 3558, 9600, 6531, 15654, 18630, 15561, 9324, 9612, 6444, 12786, 6540, 6444, 15858, 3567, 3465, 9609, 3462, 12585, 9516, 19026, 12684, 6342, 22197, 0, 0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 14, 14478, 12364, 8398, 270, 462, 456, 256, 14784, 14336, 14596, 14530, 10446, 12622, 6414, 8590, 2446, 4554, 14666, 8642, 14790, 14536, 14538, 2188, 6344, 200, 266, 264, 2372, 6400, 4354, 10436, 12420, 10374, 6216, 6408, 4296, 8524, 4360, 4296, 10572, 2378, 2310, 6406, 2308, 8390, 6344, 12684, 8456, 4228, 14798, 0, 0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 7, 7239, 6182, 4199, 135, 231, 228, 128, 7392, 7168, 7298, 7265, 5223, 6311, 3207, 4295, 1223, 2277, 7333, 4321, 7395, 7268, 7269, 1094, 3172, 100, 133, 132, 1186, 3200, 2177, 5218, 6210, 5187, 3108, 3204, 2148, 4262, 2180, 2148, 5286, 1189, 1155, 3203, 1154, 4195, 3172, 6342, 4228, 2114, 7399, 0, 0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 31, 29983, 24792, 17855, 543, 1023, 1008, 608, 32736, 31744, 32363, 32134, 24063, 27295, 12863, 17183, 4991, 12277, 32468, 20454, 32687, 32176, 31157, 4376, 15826, 400, 2679, 1648, 5802, 14912, 11847, 20906, 24875, 20846, 13554, 13874, 10674, 19161, 9779, 8624, 21208, 5781, 7695, 13839, 7722, 16815, 14800, 26425, 17969, 11627, 32767, 0, 0, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF
        };

        private static readonly ushort[][] paletteBasedColors = new ushort[][] {
            new ushort[] { 31743, 31710, 32735, 30719, 30687, 32766, 27416, 32767, 30687, 32767, 32735, 30719, 29663, 32766, 26555, 32767, 29663, 31710, 31679, 30719, 31743, 31611, 27611, 30719, 28607, 32767, 32767, 30719, 30687, 31709, 25597, 31743, 31743, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 30719, 30653, 32703, 28671, 28607, 32765, 22065, 32767, 28607, 32767, 32703, 28671, 26559, 32765, 20343, 32767, 26559, 30653, 30591, 28671, 30719, 30455, 22455, 28671, 24447, 32767, 32767, 28671, 28607, 30651, 18427, 30719, 30719, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 29695, 29596, 32671, 26623, 26527, 32764, 16714, 32767, 26527, 32767, 32671, 26623, 23455, 32764, 14131, 32767, 23455, 29596, 29503, 26623, 29695, 29299, 17299, 26623, 20287, 32767, 32767, 26623, 26527, 29593, 11257, 29695, 29695, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 26559, 25467, 32543, 22527, 23423, 32699, 10240, 29631, 21310, 32767, 32543, 21503, 17215, 32762, 7917, 32767, 20319, 25467, 26300, 24574, 25599, 26095, 11116, 21500, 14014, 31678, 29599, 24575, 22399, 27479, 3990, 26623, 26559, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 19125, 19026, 22101, 16053, 15957, 22194, 6144, 22197, 15957, 22197, 22101, 16053, 12885, 22194, 3561, 22197, 12885, 19026, 18933, 16053, 19125, 18729, 6729, 16053, 9717, 22197, 22197, 16053, 15957, 19023, 687, 19125, 19125, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 12750, 12684, 14734, 10702, 10638, 14796, 4096, 14798, 10638, 14798, 14734, 10702, 8590, 14796, 2374, 14798, 8590, 12684, 12622, 10702, 12750, 12486, 4486, 10702, 6478, 14798, 14798, 10702, 10638, 12682, 458, 12750, 12750, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 6375, 6342, 7367, 5351, 5319, 7398, 2048, 7399, 5319, 7399, 7367, 5351, 4295, 7398, 1187, 7399, 4295, 6342, 6311, 5351, 6375, 6243, 2243, 5351, 3239, 7399, 7399, 5351, 5319, 6341, 229, 6375, 6375, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 26559, 25467, 32543, 22527, 23423, 32699, 10240, 29631, 21310, 32767, 32543, 21503, 17215, 32762, 7917, 32767, 20319, 25467, 26300, 24574, 25599, 26095, 11116, 21500, 14014, 31678, 29599, 24575, 22399, 27479, 3990, 26623, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF },
            new ushort[] { 27550, 28606, 27551, 27550, 28635, 27551, 32696, 29631, 27550, 27647, 29599, 25592, 32700, 27551, 27487, 30653, 31707, 26527, 28671, 28607, 28607, 32639, 32767, 26587, 32699, 28607, 31678, 31708, 28607, 31646, 27453, 27613, 27550, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 22333, 24445, 22335, 22333, 24503, 22335, 32625, 26495, 22333, 22527, 26431, 18417, 32633, 22335, 22207, 28539, 30647, 20287, 24575, 24447, 24447, 32511, 32767, 20407, 32631, 24447, 30589, 30649, 24447, 30525, 22139, 22459, 22333, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 17116, 20284, 17119, 17116, 20371, 17119, 32554, 23359, 17116, 17407, 23263, 11242, 32566, 17119, 16927, 26425, 29587, 14047, 20479, 20287, 20287, 32383, 32767, 14227, 32563, 20287, 29500, 29590, 20287, 29404, 16825, 17305, 17116, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 9819, 15065, 10877, 9752, 16143, 10812, 30336, 18175, 9784, 11199, 17981, 992, 29394, 10847, 8540, 24311, 25358, 4636, 16383, 16060, 14044, 32191, 32767, 7983, 32431, 12957, 27291, 26418, 16060, 28187, 11415, 12055, 9819, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 6546, 9714, 6549, 6546, 9801, 6549, 21984, 12789, 6546, 6837, 12693, 672, 21996, 6549, 6357, 15855, 19017, 3477, 9909, 9717, 9717, 21813, 22197, 3657, 21993, 9717, 18930, 19020, 9717, 18834, 6255, 6735, 6546, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 4364, 6476, 4366, 4364, 6534, 4366, 14656, 8526, 4364, 4558, 8462, 448, 14664, 4366, 4238, 10570, 12678, 2318, 6606, 6478, 6478, 14542, 14798, 2438, 14662, 6478, 12620, 12680, 6478, 12556, 4170, 4490, 4364, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 2182, 3238, 2183, 2182, 3267, 2183, 7328, 4263, 2182, 2279, 4231, 224, 7332, 2183, 2119, 5285, 6339, 1159, 3303, 3239, 3239, 7271, 7399, 1219, 7331, 3239, 6310, 6340, 3239, 6278, 2085, 2245, 2182, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 9819, 15065, 10877, 9752, 16143, 10812, 30336, 18175, 9784, 11199, 17981, 992, 29394, 10847, 8540, 24311, 25358, 4636, 16383, 16060, 14044, 32191, 32767, 7983, 32431, 12957, 27291, 26418, 16060, 28187, 11415, 12055, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF },
            new ushort[] { 26429, 25437, 28476, 25375, 27547, 25373, 25467, 25436, 25465, 25407, 32571, 25407, 28441, 25373, 29631, 28539, 26495, 25432, 32696, 25560, 26493, 25567, 26430, 25498, 31518, 26490, 32700, 28538, 29531, 30492, 25369, 27548, 26429, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 20091, 18107, 24185, 17983, 22327, 17979, 18167, 18105, 18163, 18047, 32375, 18047, 24115, 17979, 26495, 24311, 20223, 18097, 32625, 18353, 20219, 18367, 20093, 18229, 30269, 20213, 32633, 24309, 26295, 28217, 17971, 22329, 20091, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 13753, 10777, 19894, 10591, 17107, 10585, 10867, 10774, 10861, 10687, 32179, 10687, 19789, 10585, 23359, 20083, 13951, 10762, 32554, 11146, 13945, 11167, 13756, 10960, 29020, 13936, 32566, 20080, 23059, 25942, 10573, 17110, 13753, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 4277, 2390, 12531, 31, 8749, 21, 495, 272, 485, 223, 29903, 223, 12357, 20, 17148, 14798, 5535, 320, 32480, 801, 4598, 863, 7385, 3625, 26650, 7656, 29331, 15785, 17775, 20496, 69, 8752, 4277, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 3183, 207, 9324, 21, 6537, 15, 297, 204, 291, 117, 21609, 117, 9219, 15, 12789, 9513, 3381, 192, 21984, 576, 3375, 597, 3186, 390, 18450, 3366, 21996, 9510, 12489, 15372, 3, 6540, 3183, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 2122, 138, 6216, 14, 4358, 10, 198, 136, 194, 78, 14406, 78, 6146, 10, 8526, 6342, 2254, 128, 14656, 384, 2250, 398, 2124, 260, 12300, 2244, 14664, 6340, 8326, 10248, 2, 4360, 2122, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 1061, 69, 3108, 7, 2179, 5, 99, 68, 97, 39, 7203, 39, 3073, 5, 4263, 3171, 1127, 64, 7328, 192, 1125, 199, 1062, 130, 6150, 1122, 7332, 3170, 4163, 5124, 1, 2180, 1061, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 4277, 2390, 12531, 31, 8749, 21, 495, 272, 485, 223, 29903, 223, 12357, 20, 17148, 14798, 5535, 320, 32480, 801, 4598, 863, 7385, 3625, 26650, 7656, 29331, 15785, 17775, 20496, 69, 8752, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF },
            new ushort[] { 27417, 25368, 29497, 25370, 26426, 25432, 27647, 25369, 25368, 27418, 29497, 27416, 25368, 25368, 25368, 25368, 28505, 25368, 27449, 25368, 28506, 27482, 25369, 25368, 28440, 25368, 25368, 27448, 26424, 25369, 28568, 26458, 27417, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 22067, 17969, 26227, 17973, 20085, 18097, 22527, 17971, 17969, 22069, 26227, 22065, 17969, 17969, 17969, 17969, 24243, 17969, 22131, 17969, 24245, 22197, 17971, 17969, 24113, 17969, 17969, 22129, 20081, 17971, 24369, 20149, 22067, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 16717, 10570, 22957, 10576, 13744, 10762, 17407, 10573, 10570, 16720, 22957, 16714, 10570, 10570, 10570, 10570, 19981, 10570, 16813, 10570, 19984, 16912, 10573, 10570, 19786, 10570, 10570, 16810, 13738, 10573, 20170, 13840, 16717, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 10342, 0, 19687, 106, 4331, 2304, 12287, 102, 0, 11274, 19621, 10240, 2082, 3, 96, 0, 12582, 2112, 11396, 0, 14634, 8456, 7, 97, 15360, 1059, 1, 9345, 6272, 7, 12800, 5448, 10342, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 6147, 0, 12387, 6, 3174, 192, 6837, 3, 0, 6150, 12387, 6144, 0, 0, 0, 0, 9411, 0, 6243, 0, 9414, 6342, 3, 0, 9216, 0, 0, 6240, 3168, 3, 9600, 3270, 6147, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 4098, 0, 8258, 4, 2116, 128, 4558, 2, 0, 4100, 8258, 4096, 0, 0, 0, 0, 6274, 0, 4162, 0, 6276, 4228, 2, 0, 6144, 0, 0, 4160, 2112, 2, 6400, 2180, 4098, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 2049, 0, 4129, 2, 1058, 64, 2279, 1, 0, 2050, 4129, 2048, 0, 0, 0, 0, 3137, 0, 2081, 0, 3138, 2114, 1, 0, 3072, 0, 0, 2080, 1056, 1, 3200, 1090, 2049, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 10342, 0, 19687, 106, 4331, 2304, 12287, 102, 0, 11274, 19621, 10240, 2082, 3, 96, 0, 12582, 2112, 11396, 0, 14634, 8456, 7, 97, 15360, 1059, 1, 9345, 6272, 7, 12800, 5448, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF }
        };

        public static (bool valid, bool palette_dependent, int[]) ConvertPassword(string password)
        {
            var palette = new int[4];
            password = password.Replace("-", string.Empty);
            if (password.Length != 12)
                return (false, false, palette);

            try
            {
                int[] n = new int[]
                {
                    int.Parse(password.Substring(0, 3)),
                    int.Parse(password.Substring(3, 3)),
                    int.Parse(password.Substring(6, 3)),
                    int.Parse(password.Substring(9, 3))
                };

                bool palette_dependent = false; // todo: check if this gets set correctly

                for (int i = 0; i < 4; i++)
                {
                    palette[i] = n[i] < 512 ? baseColors[n[i]] : paletteBasedColors[i][n[i] - 512];
                    if (palette[i] == 0xFFFF)
                    {
                        palette[i] = paletteBasedColors[i][192];
                        palette_dependent = true;
                    }
                    else if (n[i] > 512)
                    {
                        palette_dependent = true;
                    }
                }

                return (true, palette_dependent, palette);
            }
            catch { }
            return (false, false, palette);
        }

        // todo: find out the algorithm for this to get rid of the LUT
        // not worth the effort
        /*
        private static ushort brighten(ushort color)
        {
            return color;
        }

        // todo: find out the algorithm for this
        private static ushort darken(ushort color)
        {
            return color;
        }
        */
    }
}
